"use strict";(self.webpackChunkkcl_website=self.webpackChunkkcl_website||[]).push([[64082],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),d=p(n),u=i,m=d["".concat(s,".").concat(u)]||d[u]||f[u]||l;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=u;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[d]="string"==typeof e?e:i,o[1]=a;for(var p=2;p<l;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},42556:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>l,metadata:()=>a,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const l={title:"file",linkTitle:"file",type:"docs",description:"file system functions",weight:100},o=void 0,a={unversionedId:"reference/model/file",id:"reference/model/file",title:"file",description:"file system functions",source:"@site/docs/reference/model/file.md",sourceDirName:"reference/model",slug:"/reference/model/file",permalink:"/docs/next/reference/model/file",draft:!1,editUrl:"https://github.com/kcl-lang/kcl-lang.io/tree/main/docs/reference/model/file.md",tags:[],version:"current",lastUpdatedBy:"Peefy",lastUpdatedAt:1714985157,formattedLastUpdatedAt:"May 6, 2024",frontMatter:{title:"file",linkTitle:"file",type:"docs",description:"file system functions",weight:100},sidebar:"reference",previous:{title:"datetime",permalink:"/docs/next/reference/model/datetime"},next:{title:"json",permalink:"/docs/next/reference/model/json"}},s={},p=[{value:"read",id:"read",level:2},{value:"glob",id:"glob",level:2},{value:"modpath",id:"modpath",level:2},{value:"workdir",id:"workdir",level:2},{value:"exists",id:"exists",level:2},{value:"abs",id:"abs",level:2}],c={toc:p},d="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"read"},"read"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"read(filepath: str) -> str")),(0,i.kt)("p",null,"Read the contents of the file ",(0,i.kt)("inlineCode",{parentName:"p"},"filepath")," and return a string instance."),(0,i.kt)("h2",{id:"glob"},"glob"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"glob(pattern: str) -> str")),(0,i.kt)("p",null,"Return a list containing all file names that match ",(0,i.kt)("inlineCode",{parentName:"p"},"pattern"),"."),(0,i.kt)("h2",{id:"modpath"},"modpath"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modpath() -> str")),(0,i.kt)("p",null,"Return the root path of the current KCL module (kcl.mod file path or single ","*",".k file path)."),(0,i.kt)("h2",{id:"workdir"},"workdir"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"workdir() -> str")),(0,i.kt)("p",null,"Return the path of the current working directory."),(0,i.kt)("h2",{id:"exists"},"exists"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"exists(filepath: str) -> bool")),(0,i.kt)("p",null,"Whether this file path exists. Returns true if the path points at an existing entity. This function will traverse symbolic links to query information about the destination file."),(0,i.kt)("h2",{id:"abs"},"abs"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"abs(filepath: str) -> str")),(0,i.kt)("p",null,"Returns the canonical, absolute form of the path with all intermediate components normalized and symbolic links resolved."))}f.isMDXComponent=!0}}]);