"use strict";(self.webpackChunkkcl_website=self.webpackChunkkcl_website||[]).push([[89440],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=p(a),m=l,k=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return a?n.createElement(k,o(o({ref:t},u),{},{components:a})):n.createElement(k,o({ref:t},u))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,o=new Array(i);o[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[c]="string"==typeof e?e:l,o[1]=r;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},49020:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var n=a(87462),l=(a(67294),a(3905));const i={slug:"2024-03-06-kcl-0.8.0-release",title:"KCL v0.8.0 Release Blog",authors:{name:"KCL Team",title:"KCL Team"},tags:["Release Blog","KCL"]},o=void 0,r={permalink:"/blog/2024-03-06-kcl-0.8.0-release",editUrl:"https://github.com/kcl-lang/kcl-lang.io/tree/main/blog/2024-03-06-kcl-0.8.0-release/index.md",source:"@site/blog/2024-03-06-kcl-0.8.0-release/index.md",title:"KCL v0.8.0 Release Blog",description:"Introduction",date:"2024-03-06T00:00:00.000Z",formattedDate:"March 6, 2024",tags:[{label:"Release Blog",permalink:"/blog/tags/release-blog"},{label:"KCL",permalink:"/blog/tags/kcl"}],readingTime:13.385,hasTruncateMarker:!1,authors:[{name:"KCL Team",title:"KCL Team"}],frontMatter:{slug:"2024-03-06-kcl-0.8.0-release",title:"KCL v0.8.0 Release Blog",authors:{name:"KCL Team",title:"KCL Team"},tags:["Release Blog","KCL"]},prevItem:{title:"KCL Newsletter (2024.03.06 - 2024.03.20)",permalink:"/blog/2024-03-20-newsletter"},nextItem:{title:"Empowering Cloud-Native Platforms: The Synergy of KCL and Crossplane",permalink:"/blog/2024-03-04-crossplane-marketplace-kcl"}},s={authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Language Updates",id:"language-updates",level:2},{value:"\ud83d\ude97 Grammar and Semantics Updates",id:"-grammar-and-semantics-updates",level:3},{value:"KCL supports <code>show-hidden</code>",id:"kcl-supports-show-hidden",level:4},{value:"KCL supports arguments and keyword arguments union",id:"kcl-supports-arguments-and-keyword-arguments-union",level:4},{value:"KCL supports scalar yaml stream output",id:"kcl-supports-scalar-yaml-stream-output",level:4},{value:"KCL removes the <code>__settings__</code> attribute in the compiled output",id:"kcl-removes-the-__settings__-attribute-in-the-compiled-output",level:4},{value:"KCL supports the key and value evaluation in the config expression",id:"kcl-supports-the-key-and-value-evaluation-in-the-config-expression",level:4},{value:"\ud83d\ude80 Diagnostic Optimization",id:"-diagnostic-optimization",level:3},{value:"\ud83d\ude80 Language writing experience optimization",id:"-language-writing-experience-optimization",level:3},{value:"KCL standard library adds file system access functions",id:"kcl-standard-library-adds-file-system-access-functions",level:4},{value:"KCL Compiler supports the use of environment variable <code>KCL_CACHE_PATH</code> to specify the cache path",id:"kcl-compiler-supports-the-use-of-environment-variable-kcl_cache_path-to-specify-the-cache-path",level:4},{value:"KCL Plugin System supports using Golang to write KCL plugins",id:"kcl-plugin-system-supports-using-golang-to-write-kcl-plugins",level:4},{value:"\ud83d\ude38 KCL supports linux arm64",id:"-kcl-supports-linux-arm64",level:3},{value:"\ud83c\udfc4 SDK &amp; API Updates",id:"-sdk--api-updates",level:3},{value:"Rust SDK",id:"rust-sdk",level:4},{value:"Java SDK",id:"java-sdk",level:4},{value:"Go SDK",id:"go-sdk",level:4},{value:"API Update",id:"api-update",level:4},{value:"\ud83d\udc1e Other Updates and Bug Fixes",id:"-other-updates-and-bug-fixes",level:3},{value:"IDE &amp; Toolchain Updates",id:"ide--toolchain-updates",level:2},{value:"IDE Updates",id:"ide-updates",level:3},{value:"IDE semantic-level highlighting enhancement",id:"ide-semantic-level-highlighting-enhancement",level:4},{value:"IDE supports completion of builtin methods",id:"ide-supports-completion-of-builtin-methods",level:4},{value:"IDE supports quick fix for variable reference errors",id:"ide-supports-quick-fix-for-variable-reference-errors",level:4},{value:"IDE supports incremental parsing and asynchronous compilation",id:"ide-supports-incremental-parsing-and-asynchronous-compilation",level:4},{value:"IDE LSP bug fixes",id:"ide-lsp-bug-fixes",level:4},{value:"Vet Tool Updates",id:"vet-tool-updates",level:3},{value:"KCL cli supports git repository as a compilation entry",id:"kcl-cli-supports-git-repository-as-a-compilation-entry",level:4},{value:"kcl mod graph supports output KCL package dependency graph",id:"kcl-mod-graph-supports-output-kcl-package-dependency-graph",level:4},{value:"KCL Package Management",id:"kcl-package-management",level:3},{value:"KCL Package Management supports adding git dependencies through commit",id:"kcl-package-management-supports-adding-git-dependencies-through-commit",level:4},{value:"KCL Package Management supports the dependency name with <code>-</code>",id:"kcl-package-management-supports-the-dependency-name-with--",level:4},{value:"KCL Import Tool",id:"kcl-import-tool",level:3},{value:"Community Integrations &amp; Extensions Updates",id:"community-integrations--extensions-updates",level:2},{value:"Flux KCL Controller Release",id:"flux-kcl-controller-release",level:3},{value:"CodeQL KCL Tool",id:"codeql-kcl-tool",level:3},{value:"KCL Modules Update",id:"kcl-modules-update",level:2},{value:"Other Updates",id:"other-updates",level:2},{value:"Document Updates",id:"document-updates",level:2},{value:"Community Updates",id:"community-updates",level:2},{value:"KCL LFX Project KickOff",id:"kcl-lfx-project-kickoff",level:3},{value:"KCL on Crossplane Function Market",id:"kcl-on-crossplane-function-market",level:3},{value:"Special Thanks",id:"special-thanks",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Additional Resources",id:"additional-resources",level:2},{value:"Resources",id:"resources",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...i}=e;return(0,l.kt)(c,(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"The KCL team is pleased to announce that KCL v0.8.0 is now available! This release has brought three key updates to everyone: ",(0,l.kt)("strong",{parentName:"p"},"Language"),", ",(0,l.kt)("strong",{parentName:"p"},"Tools"),", and ",(0,l.kt)("strong",{parentName:"p"},"Integrations"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"Use KCL language, tools and IDE extensions with more complete features and fewer errors to improve code writing experience and efficiency."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"More comprehensive and rich community ecosystem integration, improving operation and maintenance experience."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"More comprehensive KCL third-party dependencies, easier integration with cloud-native ecosystem.")))),(0,l.kt)("p",null,"KCL v0.8.0 is now available for download at ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/kcl-lang/kcl/releases/tag/v0.8.0"},"KCL v0.8.0 Release Page")," or ",(0,l.kt)("a",{parentName:"p",href:"https://kcl-lang.io"},"KCL Official Website"),"."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/kcl-lang/kcl"},"KCL")," is an open-source, constraint-based record and functional language hosted by Cloud Native Computing Foundation (CNCF). KCL improves the writing of numerous complex configurations, such as cloud-native scenarios, through its mature programming language technology and practice. It is dedicated to building better modularity, scalability, and stability around configurations, simpler logic writing, faster automation, and great built-in or API-driven integrations."),(0,l.kt)("p",null,"This blog will introduce the content of KCL v0.8.0 and recent developments in the KCL community to readers."),(0,l.kt)("h2",{id:"language-updates"},"Language Updates"),(0,l.kt)("h3",{id:"-grammar-and-semantics-updates"},"\ud83d\ude97 Grammar and Semantics Updates"),(0,l.kt)("h4",{id:"kcl-supports-show-hidden"},"KCL supports ",(0,l.kt)("inlineCode",{parentName:"h4"},"show-hidden")),(0,l.kt)("p",null,"KCL v0.8.0 adds support for ",(0,l.kt)("inlineCode",{parentName:"p"},"--show-hidden")," to display private variables."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"main.k")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kcl"},"a = {_b = 1}\n")),(0,l.kt)("p",null,"Compile by ",(0,l.kt)("inlineCode",{parentName:"p"},"kcl run main.k --show-hidden"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"a:\n  _b: 1\n")),(0,l.kt)("h4",{id:"kcl-supports-arguments-and-keyword-arguments-union"},"KCL supports arguments and keyword arguments union"),(0,l.kt)("p",null,"KCL v0.8.0 adds support for arguments and keyword arguments union. Schema instances with arguments will union arguments during union operations."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kcl"},'schema Person[separator]:\n    firstName: str = "John"\n    lastName: str\n    fullName: str = firstName + separator + lastName\n\nx = Person(" ") {lastName = "Doe"}\n\ny = Person("-") {lastName = "Doe1"}\n\nz = x | y\n')),(0,l.kt)("p",null,"The compiled result is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"x:\n  firstName: John\n  lastName: Doe\n  fullName: John Doe\ny:\n  firstName: John\n  lastName: Doe1\n  fullName: John-Doe1\nz:\n  firstName: John\n  lastName: Doe1\n  fullName: John-Doe1\n")),(0,l.kt)("h4",{id:"kcl-supports-scalar-yaml-stream-output"},"KCL supports scalar yaml stream output"),(0,l.kt)("p",null,"In v0.8.0, by using ",(0,l.kt)("inlineCode",{parentName:"p"},"yaml_stream")," method, you can output the result of yaml scalar."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kcl"},"import manifests\n\nx0 = 1\nx1 = 2\nmanifests.yaml_stream([x0, x1])\n")),(0,l.kt)("p",null,"The compiled result is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"1\n---\n2\n")),(0,l.kt)("h4",{id:"kcl-removes-the-__settings__-attribute-in-the-compiled-output"},"KCL removes the ",(0,l.kt)("inlineCode",{parentName:"h4"},"__settings__")," attribute in the compiled output"),(0,l.kt)("p",null,"In v0.8.0, the ",(0,l.kt)("inlineCode",{parentName:"p"},"__settings__")," attribute is removed from the compiled output."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kcl"},'schema Person:\n    __settings__: {str:str} = {"output_type": "STANDALONE"}\n    name?: str\n    age?: int\n    school?: str\n\na = Person{\n    name: "a",\n}\n')),(0,l.kt)("p",null,"The compiled result is as follows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"a:\n  name: a\n")),(0,l.kt)("h4",{id:"kcl-supports-the-key-and-value-evaluation-in-the-config-expression"},"KCL supports the key and value evaluation in the config expression"),(0,l.kt)("p",null,"In v0.8.0, KCL supports the key and value evaluation in the config expression."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kcl"},"_data = {\n    \"a\": 'foo'\n    \"b\": 'bar'\n}\n\nr0 = [{v = k} for k, v in _data]\nr1 = [{k = v} for k, v in _data]\nr2 = [{k.foo = v} for k, v in _data]\nr3 = [[k] for k, v in _data]\nr4 = [[k, v] for k, v in _data]\n")),(0,l.kt)("p",null,"The compiled result is as follows."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"r0:\n  - foo: a\n  - bar: b\nr1:\n  - a: foo\n  - b: bar\nr2:\n  - a:\n      foo: foo\n  - b:\n      foo: bar\nr3:\n  - - a\n  - - b\nr4:\n  - - a\n    - foo\n  - - b\n    - bar\n")),(0,l.kt)("h3",{id:"-diagnostic-optimization"},"\ud83d\ude80 Diagnostic Optimization"),(0,l.kt)("p",null,"KCL uses the ",(0,l.kt)("inlineCode",{parentName:"p"},"elif")," keyword in the ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," block, not ",(0,l.kt)("inlineCode",{parentName:"p"},"else if"),"."),(0,l.kt)("p",null,"Compile the following KCL program:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kcl"},"if True: a = 1\nelse if False: b = 1\n")),(0,l.kt)("p",null,"The diagnostic information in KCL has added suggestions for error correction:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"error[E1001]: InvalidSyntax\n --\x3e main.k:2:6\n  |\n2 | else if False: b = 1\n  |      ^ 'else if' here is invalid in KCL, consider using the 'elif' keyword\n  |\n")),(0,l.kt)("h3",{id:"-language-writing-experience-optimization"},"\ud83d\ude80 Language writing experience optimization"),(0,l.kt)("h4",{id:"kcl-standard-library-adds-file-system-access-functions"},"KCL standard library adds file system access functions"),(0,l.kt)("p",null,"KCL has added methods to access the file system. In v0.8.0, it supports methods such as ",(0,l.kt)("inlineCode",{parentName:"p"},"read"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"glob"),", etc. to access the file system."),(0,l.kt)("p",null,"By using the ",(0,l.kt)("inlineCode",{parentName:"p"},"read"),", you can read the contents of a file as a string."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kcl"},'import file\n\na = file.read("hello.txt")\n')),(0,l.kt)("p",null,"Add the following content to the ",(0,l.kt)("inlineCode",{parentName:"p"},"hello.txt")," file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"Hello World !\n")),(0,l.kt)("p",null,"The compilation result is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"a: Hello World !\n")),(0,l.kt)("p",null,"By combining the ",(0,l.kt)("inlineCode",{parentName:"p"},"json.decode")," method, you can easily deserialize a JSON file."),(0,l.kt)("p",null,"Add the following content to the ",(0,l.kt)("inlineCode",{parentName:"p"},"hello.json")," file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "John",\n  "age": 10\n}\n')),(0,l.kt)("p",null,"KCL program:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kcl"},'import file\nimport json\n\n_a = json.decode(file.read("hello.json"))\n\nname = _a.name\nage = _a.age\n')),(0,l.kt)("p",null,"The compilation result is as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"name: John\nage: 10\n")),(0,l.kt)("p",null,"More details - ",(0,l.kt)("a",{parentName:"p",href:"https://kcl-lang.io/zh-CN/docs/reference/model/file/"},"https://kcl-lang.io/zh-CN/docs/reference/model/file/")),(0,l.kt)("h4",{id:"kcl-compiler-supports-the-use-of-environment-variable-kcl_cache_path-to-specify-the-cache-path"},"KCL Compiler supports the use of environment variable ",(0,l.kt)("inlineCode",{parentName:"h4"},"KCL_CACHE_PATH")," to specify the cache path"),(0,l.kt)("p",null,"KCL Compiler will cache the generated code to the directory specified by the environment variable ",(0,l.kt)("inlineCode",{parentName:"p"},"KCL_CACHE_PATH"),". If not specified, it will be generated to the project root directory."),(0,l.kt)("h4",{id:"kcl-plugin-system-supports-using-golang-to-write-kcl-plugins"},"KCL Plugin System supports using Golang to write KCL plugins"),(0,l.kt)("p",null,"KCL Plugin System supports using Golang to write KCL plugins. The following is an example of using Golang to define the ",(0,l.kt)("inlineCode",{parentName:"p"},"hello")," plugin."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-golang"},'package hello_plugin\n\nimport (\n    "kcl-lang.io/kcl-go/pkg/plugin"\n)\n\nfunc init() {\n    plugin.RegisterPlugin(plugin.Plugin{\n        Name: "hello",\n        MethodMap: map[string]plugin.MethodSpec{\n            "add": {\n                Body: func(args *plugin.MethodArgs) (*plugin.MethodResult, error) {\n                    v := args.IntArg(0) + args.IntArg(1)\n                    return &plugin.MethodResult{V: v}, nil\n                },\n            },\n        },\n    })\n}\n')),(0,l.kt)("p",null,"With the ",(0,l.kt)("inlineCode",{parentName:"p"},"hello")," plugin, you can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"add")," method in the KCL program."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kcl"},'package main\n\nimport (\n    "fmt"\n\n    "kcl-lang.io/kcl-go/pkg/kcl"\n    "kcl-lang.io/kcl-go/pkg/native"                // Import the native API\n    _ "kcl-lang.io/kcl-go/pkg/plugin/hello_plugin" // Import the hello plugin\n)\n\nfunc main() {\n    // Note we use `native.MustRun` here instead of `kcl.MustRun`, because it needs the cgo feature.\n    yaml := native.MustRun("main.k", kcl.WithCode(code)).GetRawYamlResult()\n    fmt.Println(yaml)\n}\n\nconst code = `\nimport kcl_plugin.hello\n\nname = "kcl"\nthree = hello.add(1,2) # 3\n')),(0,l.kt)("h3",{id:"-kcl-supports-linux-arm64"},"\ud83d\ude38 KCL supports linux arm64"),(0,l.kt)("p",null,"KCL v0.8.0 adds support for the Linux arm64 platform in the release product."),(0,l.kt)("p",null,"You can find the compressed package with the suffix ",(0,l.kt)("inlineCode",{parentName:"p"},"linux-arm64")," on the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/kcl-lang/kcl/releases"},"KCL Release Page")),(0,l.kt)("h3",{id:"-sdk--api-updates"},"\ud83c\udfc4 SDK & API Updates"),(0,l.kt)("h4",{id:"rust-sdk"},"Rust SDK"),(0,l.kt)("p",null,"KCL Rust SDK provides a series of APIs for compiling, validating, testing, and formatting KCL files."),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/kcl-lang/lib"},"KCL Rust SDK: https://github.com/kcl-lang/lib")),(0,l.kt)("h4",{id:"java-sdk"},"Java SDK"),(0,l.kt)("p",null,"KCL Java SDK adds syntax tree, scope, symbol, and other syntax and semantic structure definitions and related query APIs."),(0,l.kt)("h4",{id:"go-sdk"},"Go SDK"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"KCL Doc supports output in OpenAPI format."),(0,l.kt)("li",{parentName:"ul"},"Go SDK add APIs for parsing.")),(0,l.kt)("h4",{id:"api-update"},"API Update"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"KCL API adds API for validating JSON and YAML files."),(0,l.kt)("li",{parentName:"ul"},"Introducing syntax and semantic analysis APIs for analyzing KCL code."),(0,l.kt)("li",{parentName:"ul"},"Introducing a binary artifact build API for caching compilation results."),(0,l.kt)("li",{parentName:"ul"},"Introducing a binary artifact execution API for directly running compiled results, avoiding redundant compilation and improving performance."),(0,l.kt)("li",{parentName:"ul"},"Introducing a code generation API to programmatically implement KCL code generation instead of writing complex templates.")),(0,l.kt)("p",null,"More updates can be found ",(0,l.kt)("a",{parentName:"p",href:"https://kcl-lang.io/docs/reference/xlang-api/go-api"},"here"),"."),(0,l.kt)("h3",{id:"-other-updates-and-bug-fixes"},"\ud83d\udc1e Other Updates and Bug Fixes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Fixed compilation errors caused by using the -S compilation parameter in KCL CLI."),(0,l.kt)("li",{parentName:"ul"},"Corrected an issue in the kcl fmt tool where an extra newline was added at the end when formatting lambda expressions."),(0,l.kt)("li",{parentName:"ul"},"Resolved an error in Schema Doc code completion snippets."),(0,l.kt)("li",{parentName:"ul"},"Fixed a recursive check error for required properties in Schema objects."),(0,l.kt)("li",{parentName:"ul"},"Enhanced the robustness of Schema index signature type checks."),(0,l.kt)("li",{parentName:"ul"},"Addressed an issue where string identifiers like \u201c$if\u201d were not correctly defined within Schema."),(0,l.kt)("li",{parentName:"ul"},"Optimized error messages for unexpected tokens in syntax errors."),(0,l.kt)("li",{parentName:"ul"},"Rectified variable calculations in unexpected dictionary comprehension expressions where the key and loop variable were the same.")),(0,l.kt)("h2",{id:"ide--toolchain-updates"},"IDE & Toolchain Updates"),(0,l.kt)("h3",{id:"ide-updates"},"IDE Updates"),(0,l.kt)("h4",{id:"ide-semantic-level-highlighting-enhancement"},"IDE semantic-level highlighting enhancement"),(0,l.kt)("p",null,"KCL IDE previously only supported KCL syntax highlighting, as shown in the figure below:"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"old-ide",src:a(70202).Z,width:"435",height:"151"})),(0,l.kt)("p",null,"We have gradually introduced a new KCL semantic model in the past year. With the support of the new semantic model, KCL IDE now supports semantic-level highlighting. Code that is semantically related will be highlighted in the same way."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"new-ide",src:a(50297).Z,width:"287",height:"145"})),(0,l.kt)("p",null,"For more information about the KCL semantic model, see:\n",(0,l.kt)("a",{parentName:"p",href:"https://kcl-lang.io/zh-CN/blog/2023-12-09-kcl-new-semantic-model"},"Unlocking Advanced Code Intelligence with the KCL Semantic Model")),(0,l.kt)("h4",{id:"ide-supports-completion-of-builtin-methods"},"IDE supports completion of builtin methods"),(0,l.kt)("p",null,"KCL IDE supports completion of builtin methods, as shown in the figure below:"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"builtin-completion",src:a(88594).Z,width:"1218",height:"456"})),(0,l.kt)("h4",{id:"ide-supports-quick-fix-for-variable-reference-errors"},"IDE supports quick fix for variable reference errors"),(0,l.kt)("p",null,"KCL IDE supports quick fix for variable reference errors, as shown in the figure below:"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"quick-fix",src:a(51237).Z,width:"1218",height:"496"})),(0,l.kt)("h4",{id:"ide-supports-incremental-parsing-and-asynchronous-compilation"},"IDE supports incremental parsing and asynchronous compilation"),(0,l.kt)("p",null,"IDE supports incremental parsing and asynchronous compilation through the new semantic model, which improves the compilation speed and writing experience."),(0,l.kt)("p",null,"More details: ",(0,l.kt)("a",{parentName:"p",href:"https://kcl-lang.io/zh-CN/blog/2023-12-09-kcl-new-semantic-model"},"https://kcl-lang.io/zh-CN/blog/2023-12-09-kcl-new-semantic-model")),(0,l.kt)("h4",{id:"ide-lsp-bug-fixes"},"IDE LSP bug fixes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Fixed an issue where string interpolation variables in assert statements couldn\u2019t navigate."),(0,l.kt)("li",{parentName:"ul"},"Corrected an exception-triggering issue in function autocompletion within strings."),(0,l.kt)("li",{parentName:"ul"},"Resolved an autocompletion error when a comment followed a string."),(0,l.kt)("li",{parentName:"ul"},"Fixed an issue where internal property symbols in schemas couldn\u2019t navigate."),(0,l.kt)("li",{parentName:"ul"},"Addressed an exception in alias semantic checks and autocompletion for import statements."),(0,l.kt)("li",{parentName:"ul"},"Rectified autocompletion issues in check expressions within schemas."),(0,l.kt)("li",{parentName:"ul"},"Fixed autocompletion errors in nested schema definitions."),(0,l.kt)("li",{parentName:"ul"},"Resolved missing hover information for certain elements."),(0,l.kt)("li",{parentName:"ul"},"Ensured consistent symbol types for autocompletion across different syntaxes."),(0,l.kt)("li",{parentName:"ul"},"Distinguished between schema type and instance autocompletion symbols."),(0,l.kt)("li",{parentName:"ul"},"Standardized schema comment documentation autocompletion format."),(0,l.kt)("li",{parentName:"ul"},"Fixed issues where symbols within configuration block if statements couldn\u2019t navigate or autocompletion was affected.")),(0,l.kt)("h3",{id:"vet-tool-updates"},"Vet Tool Updates"),(0,l.kt)("p",null,"In v0.8.0 release, we have optimized the diagnostic of the KCL verification tool. In the work of using the KCL verification tool to verify json/yaml files, the abnormal location of the json file will be accurately located."),(0,l.kt)("p",null,"Take ",(0,l.kt)("inlineCode",{parentName:"p"},"hello.json")," as an example, we will verify the content of the json file through the following ",(0,l.kt)("inlineCode",{parentName:"p"},"main.k")," file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": 10,\n  "age": 18,\n  "message": "This is Alice"\n}\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"main.k")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kcl"},"schema User:\n    name: str\n    age: int\n    message?: str\n")),(0,l.kt)("p",null,"We can verify the content of the json file through the following command."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kcl vet hello.json main.k\n")),(0,l.kt)("p",null,"We can see the error location in the json file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'error[E2G22]: TypeError\n --\x3e test.json:2:5\n  |\n2 |     "name": 10,\n  |     ^ expected str, got int(10)\n  |\n\n --\x3e main.k:2:5\n  |\n2 |     name: str\n  |     ^ variable is defined here, its type is str, but got int(10)\n  |\n')),(0,l.kt)("h4",{id:"kcl-cli-supports-git-repository-as-a-compilation-entry"},"KCL cli supports git repository as a compilation entry"),(0,l.kt)("p",null,"By using the following command, you can use the KCL git repository as a compilation entry."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kcl run <git url>\n")),(0,l.kt)("h4",{id:"kcl-mod-graph-supports-output-kcl-package-dependency-graph"},"kcl mod graph supports output KCL package dependency graph"),(0,l.kt)("p",null,"You can use command ",(0,l.kt)("inlineCode",{parentName:"p"},"kcl mod graph")," to output the KCL package dependency graph."),(0,l.kt)("h3",{id:"kcl-package-management"},"KCL Package Management"),(0,l.kt)("h4",{id:"kcl-package-management-supports-adding-git-dependencies-through-commit"},"KCL Package Management supports adding git dependencies through commit"),(0,l.kt)("p",null,"KCL Package Management adds the ability to add git repo dependencies through commit. For example, using ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/KusionStack/catalog"},"https://github.com/KusionStack/catalog"),"\uff0cadd commit ",(0,l.kt)("inlineCode",{parentName:"p"},"a29e3db")," as a dependency. You can add it through editing the kcl.mod file or directly through the command line."),(0,l.kt)("p",null,"Edit the kcl.mod file as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\ncatalog = { git = "https://github.com/KusionStack/catalog.git", commit = "a29e3db" }\n')),(0,l.kt)("p",null,"Or add it through the command line:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kcl mod add --git https://github.com/KusionStack/catalog.git --commit a29e3db\n")),(0,l.kt)("h4",{id:"kcl-package-management-supports-the-dependency-name-with--"},"KCL Package Management supports the dependency name with ",(0,l.kt)("inlineCode",{parentName:"h4"},"-")),(0,l.kt)("p",null,"KCL Package Management supports the dependency name with ",(0,l.kt)("inlineCode",{parentName:"p"},"-"),". For example, you can add the ",(0,l.kt)("inlineCode",{parentName:"p"},"set-annotation")," as a dependency through the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kcl mod add set-annotation\n")),(0,l.kt)("p",null,"In the KCL program, you can reference it through ",(0,l.kt)("inlineCode",{parentName:"p"},"set_annotation"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kcl"},"import set_annotation\n")),(0,l.kt)("h3",{id:"kcl-import-tool"},"KCL Import Tool"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Support mapping OpenAPI multiplyOf specification to KCL multiplyof function for validation."),(0,l.kt)("li",{parentName:"ul"},"Support outputting multiple KCL files from YAML Stream-formatted Kubernetes CRD files."),(0,l.kt)("li",{parentName:"ul"},"Support generating validation expressions for OpenAPI allOf keyword."),(0,l.kt)("li",{parentName:"ul"},"Support generating validation expressions for KCL array and dictionary types using all/any.")),(0,l.kt)("h2",{id:"community-integrations--extensions-updates"},"Community Integrations & Extensions Updates"),(0,l.kt)("h3",{id:"flux-kcl-controller-release"},"Flux KCL Controller Release"),(0,l.kt)("p",null,"We have developed ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/kcl-lang/flux-kcl-controller"},"Flux KCL Controller")," to supports KCL integration with Flux. After installing Flux KCL Controller in the cluster, you can use the following resources to achieve continuous integration of KCL git repositories through FluxCD."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: source.toolkit.fluxcd.io/v1\nkind: GitRepository\nmetadata:\n  name: kcl-deployment\n  namespace: source-system\nspec:\n  interval: 30s\n  # The URL of the git repository\n  url: https://github.com/awesome-kusion/kcl-deployment.git\n  ref:\n    branch: main\n---\napiVersion: krm.kcl.dev.fluxcd/v1alpha1\nkind: KCLRun\nmetadata:\n  name: kcl-deployment\n  namespace: source-system\nspec:\n  sourceRef:\n    kind: GitRepository\n    name: kcl-deployment\n")),(0,l.kt)("p",null,"More details: ",(0,l.kt)("a",{parentName:"p",href:"https://kcl-lang.io/zh-CN/blog/2024-02-01-biweekly-newsletter/"},"https://kcl-lang.io/zh-CN/blog/2024-02-01-biweekly-newsletter/")),(0,l.kt)("h3",{id:"codeql-kcl-tool"},"CodeQL KCL Tool"),(0,l.kt)("p",null,"We finished CodeQL KCL dbschema definition and data extraction for KCL syntax and semantics. We can use CodeQL to query KCL code for static analysis and scanning to improve code security."),(0,l.kt)("p",null,"More details: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/kcl-lang/codeql-kcl"},"https://github.com/kcl-lang/codeql-kcl")),(0,l.kt)("h2",{id:"kcl-modules-update"},"KCL Modules Update"),(0,l.kt)("p",null,"There are 303 KCL modules in the KCL v0.8.0 release on ",(0,l.kt)("a",{parentName:"p",href:"https://artifacthub.io"},"https://artifacthub.io"),", mainly including new models related to Crossplane Provider and libraries related to JSON merge operations."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"KCL JSON Patch Library: ",(0,l.kt)("a",{parentName:"p",href:"https://artifacthub.io/packages/kcl/kcl-module/jsonpatch"},"https://artifacthub.io/packages/kcl/kcl-module/jsonpatch"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"KCL JSON Merge Patch Library: ",(0,l.kt)("a",{parentName:"p",href:"https://artifacthub.io/packages/kcl/kcl-module/json_merge_patch"},"https://artifacthub.io/packages/kcl/kcl-module/json_merge_patch"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"KCL Kubernetes Strategy Merge Patch Library: ",(0,l.kt)("a",{parentName:"p",href:"https://artifacthub.io/packages/kcl/kcl-module/strategic_merge_patch"},"https://artifacthub.io/packages/kcl/kcl-module/strategic_merge_patch"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"KCL Crossplane and Crossplane Provider Series Models: ",(0,l.kt)("a",{parentName:"p",href:"https://artifacthub.io/packages/search?org=kcl&sort=relevance&page=1&ts_query_web=crossplane"},"https://artifacthub.io/packages/search?org=kcl&sort=relevance&page=1&ts_query_web=crossplane"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Kubernetes 1.29 version: ",(0,l.kt)("a",{parentName:"p",href:"https://artifacthub.io/packages/kcl/kcl-module/k8s/1.29.0"},"https://artifacthub.io/packages/kcl/kcl-module/k8s/1.29.0"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"New Podinfo application configuration model, supports setting external dynamic parameters such as replicas, etc., can render Kubernetes resource configuration directly through a command, and can modify and customize resource templates based on this model."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kcl run oci://ghcr.io/kcl-lang/podinfo -D replicas=2\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"JSON Schema library released version 0.0.4, fixed type definition errors. You can execute the following command to update or add dependencies.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"kcl mod add jsonschema:0.0.4\n")),(0,l.kt)("h2",{id:"other-updates"},"Other Updates"),(0,l.kt)("p",null,"The full update and bugfix List of KCL v0.8.0 can be found at: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/kcl-lang/kcl/compare/v0.7.0...v0.8.0"},"https://github.com/kcl-lang/kcl/compare/v0.7.0...v0.8.0")),(0,l.kt)("h2",{id:"document-updates"},"Document Updates"),(0,l.kt)("p",null,"The versioning semantic option is added to the ",(0,l.kt)("a",{parentName:"p",href:"https://kcl-lang.io/"},"KCL website"),". Currently, v0.4.x, v0.5.x, v0.6.x, v0.7.0 and v0.8.0 versions are supported."),(0,l.kt)("h2",{id:"community-updates"},"Community Updates"),(0,l.kt)("h3",{id:"kcl-lfx-project-kickoff"},"KCL LFX Project KickOff"),(0,l.kt)("p",null,"Congratulations to @AkashKumar7902, @octonawish-akcodes, @shashank-iitbhu for being selected for the CNCF KCL LFX project, and thanks to @Vanshikav123, @Amit Pandey for their active participation."),(0,l.kt)("h3",{id:"kcl-on-crossplane-function-market"},"KCL on Crossplane Function Market"),(0,l.kt)("p",null,"After the release of the combination function in Crossplane v1.14, the scope of using Crossplane to build cloud-native platforms has been rapidly expanded. The KCL team has followed up and proactively built a reusable function. The entire Crossplane ecosystem can now leverage the high-level experience and capabilities provided by KCL to build its own cloud-native platform."),(0,l.kt)("p",null,"More details: ",(0,l.kt)("a",{parentName:"p",href:"https://blog.crossplane.io/function-kcl/"},"https://blog.crossplane.io/function-kcl/")),(0,l.kt)("h2",{id:"special-thanks"},"Special Thanks"),(0,l.kt)("p",null,"Thanks to the community friends for their contributions to KCL v0.8.0. The following list is in no particular order:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Thanks to @jakezhu9 for the continuous contribution to the kcl import tool \ud83e\udd1d"),(0,l.kt)("li",{parentName:"ul"},"Thanks to @octonawish-akcodes for the continuous contributions to KCL code cleanup and FAQ documentation \ud83d\ude4c"),(0,l.kt)("li",{parentName:"ul"},"Thanks to @satyazzz123 for contributing to the support of reading environment variables in KRM KCL \ud83d\ude4c"),(0,l.kt)("li",{parentName:"ul"},"Thanks to @AkashKumar7902 for the contributions to the package management tool feature in KCL \ud83d\ude4c"),(0,l.kt)("li",{parentName:"ul"},"Thanks to @UtkarshUmre for the contribution to the KCL linux-arm64 build CI \ud83d\ude4c"),(0,l.kt)("li",{parentName:"ul"},"Thanks to @octonawish-akcodes and @d4v1d03 for the continuous contributions to KCL FAQ documentation and KCL IDE feature \ud83d\ude4c"),(0,l.kt)("li",{parentName:"ul"},"Thanks to @octonawish-akcodes for the contribution to the Ansible KCL Module"),(0,l.kt)("li",{parentName:"ul"},"Thanks to @AkashKumar7902 and @Vanshikav123 for the contributions to the package management tool feature in KCL \ud83d\ude4c"),(0,l.kt)("li",{parentName:"ul"},"Thanks to @StevenLeiZhang for the contributions to KCL documentation and KCL plugin"),(0,l.kt)("li",{parentName:"ul"},"Thanks to @patrycju, @Callum Lyall, @Matt Gowie, @ShiroDN, @FLAGLORD, @YiuTerran, @flyinox, @steeling, @Anoop, @Even Solberg, @Phillip Neumann, @Naxe, @rozaliev, @CloudZero357, @martingreber, @az, @Art3mK, @Erick, @TheChinBot, @Evgeny Shepelyuk, @yonas, @vtomilov, @Fdall, @bozaro, @starkers, and @MrGuoRanDuo for their valuable suggestions and feedback during the iteration process of KCL v0.8 \ud83d\ude4c")),(0,l.kt)("h2",{id:"next-steps"},"Next Steps"),(0,l.kt)("p",null,"We expect to release KCL v0.9.0 in May 2024. For more details, please refer to KCL 2024 Roadmap and KCL v0.9.0 Milestone. If you have more ideas and needs, please feel free to raise Issues or Discussions in the KCL Github repository, and welcome to join our community for discussion \ud83d\ude4c \ud83d\ude4c \ud83d\ude4c"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"KCL 2024 Roadmap: ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/kcl-lang/kcl/issues/882"},"https://github.com/kcl-lang/kcl/issues/882")),(0,l.kt)("li",{parentName:"ul"},"KCL v0.9.0 Milestone: ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/kcl-lang/kcl/milestone/9"},"https://github.com/kcl-lang/kcl/milestone/9")),(0,l.kt)("li",{parentName:"ul"},"KCL GitHub Issues: ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/kcl-lang/kcl/issues"},"https://github.com/kcl-lang/kcl/issues")),(0,l.kt)("li",{parentName:"ul"},"KCL GitHub Discussion: ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/orgs/kcl-lang/discussions"},"https://github.com/orgs/kcl-lang/discussions")),(0,l.kt)("li",{parentName:"ul"},"KCL Community: ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/kcl-lang/community"},"https://github.com/kcl-lang/community"))),(0,l.kt)("h2",{id:"additional-resources"},"Additional Resources"),(0,l.kt)("p",null,"For more information, see ",(0,l.kt)("a",{parentName:"p",href:"https://kcl-lang.io/docs/user_docs/support/"},"KCL FAQ"),"."),(0,l.kt)("h2",{id:"resources"},"Resources"),(0,l.kt)("p",null,"Thank all KCL users for their valuable feedback and suggestions during this version release. For more resources, please refer to:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://kcl-lang.io/"},"KCL Website")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://kusionstack.io/"},"KusionStack Website")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/kcl-lang/"},"KCL Repo")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/KusionStack/"},"KusionStack Repo"))),(0,l.kt)("p",null,"See the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/kcl-lang/community"},"community")," for ways to join us. \ud83d\udc4f\ud83d\udc4f\ud83d\udc4f"))}d.isMDXComponent=!0},50297:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/new-ide-a62fcf4ef6b9d078f77a7e15af161e17.png"},70202:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/old-ide-835ff47b36b5e23f304f8092c3afd989.png"},88594:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/builtin-ide-0e090b72218a4258d2a1831527920d08.gif"},51237:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/quick-fix-960989191f14be672e644c4fa97c4522.gif"}}]);