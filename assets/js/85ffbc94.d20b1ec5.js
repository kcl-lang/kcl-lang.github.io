"use strict";(self.webpackChunkkcl_website=self.webpackChunkkcl_website||[]).push([[64082],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>m});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),c=s(r),f=i,m=c["".concat(p,".").concat(f)]||c[f]||u[f]||l;return r?n.createElement(m,o(o({ref:t},d),{},{components:r})):n.createElement(m,o({ref:t},d))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=r.length,o=new Array(l);o[0]=f;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[c]="string"==typeof e?e:i,o[1]=a;for(var s=2;s<l;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},31416:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var n=r(87462),i=(r(67294),r(3905));const l={title:"file",linkTitle:"file",type:"docs",description:"file system functions",weight:100},o=void 0,a={unversionedId:"reference/model/file",id:"reference/model/file",title:"file",description:"file system functions",source:"@site/docs/reference/model/file.md",sourceDirName:"reference/model",slug:"/reference/model/file",permalink:"/docs/next/reference/model/file",draft:!1,editUrl:"https://github.com/kcl-lang/kcl-lang.io/tree/main/docs/reference/model/file.md",tags:[],version:"current",lastUpdatedBy:"Peefy",lastUpdatedAt:1715583130,formattedLastUpdatedAt:"May 13, 2024",frontMatter:{title:"file",linkTitle:"file",type:"docs",description:"file system functions",weight:100},sidebar:"reference",previous:{title:"datetime",permalink:"/docs/next/reference/model/datetime"},next:{title:"json",permalink:"/docs/next/reference/model/json"}},p={},s=[{value:"read",id:"read",level:2},{value:"glob",id:"glob",level:2},{value:"modpath",id:"modpath",level:2},{value:"workdir",id:"workdir",level:2},{value:"exists",id:"exists",level:2},{value:"abs",id:"abs",level:2},{value:"mkdir",id:"mkdir",level:2},{value:"delete",id:"delete",level:2},{value:"cp",id:"cp",level:2},{value:"mv",id:"mv",level:2}],d={toc:s},c="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"read"},"read"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"read(filepath: str) -> str")),(0,i.kt)("p",null,"Read the contents of the file ",(0,i.kt)("inlineCode",{parentName:"p"},"filepath")," and return a string instance."),(0,i.kt)("h2",{id:"glob"},"glob"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"glob(pattern: str) -> str")),(0,i.kt)("p",null,"Return a list containing all file names that match ",(0,i.kt)("inlineCode",{parentName:"p"},"pattern"),"."),(0,i.kt)("h2",{id:"modpath"},"modpath"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"modpath() -> str")),(0,i.kt)("p",null,"Return the root path of the current KCL module (kcl.mod file path or single ","*",".k file path)."),(0,i.kt)("h2",{id:"workdir"},"workdir"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"workdir() -> str")),(0,i.kt)("p",null,"Return the path of the current working directory."),(0,i.kt)("h2",{id:"exists"},"exists"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"exists(filepath: str) -> bool")),(0,i.kt)("p",null,"Whether this file path exists. Returns true if the path points at an existing entity. This function will traverse symbolic links to query information about the destination file."),(0,i.kt)("h2",{id:"abs"},"abs"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"abs(filepath: str) -> str")),(0,i.kt)("p",null,"Returns the canonical, absolute form of the path with all intermediate components normalized and symbolic links resolved."),(0,i.kt)("h2",{id:"mkdir"},"mkdir"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mkdir(directory: str, exists: bool=False)")),(0,i.kt)("p",null,"Create a new directory at the specified path if it doesn't already exist."),(0,i.kt)("h2",{id:"delete"},"delete"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"delete(directory: str)")),(0,i.kt)("p",null,"Delete a file or an empty directory at the specified path."),(0,i.kt)("h2",{id:"cp"},"cp"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cp(src: str, dest: str)")),(0,i.kt)("p",null,"Copy a file or directory from the source path to the destination path."),(0,i.kt)("h2",{id:"mv"},"mv"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"mv(src: str, dest: str)")),(0,i.kt)("p",null,"Move a file or directory from the source path to the destination path."))}u.isMDXComponent=!0}}]);